// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  // url      = "file:../database3.db"
  url      = "file:../../loop_data/database.db"
}

generator client {
  provider = "prisma-client-js"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Loop {
//   id        String   @id @default(cuid())
//   name      String
//   color     String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   users     UserLoop[]
// }
model Loop {
  id        String   @id @default(cuid())
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String

  owner     User     @relation("OwnedLoops", fields: [ownerId], references: [id])
  users     UserLoop[]
}

model UserLoop {
  userId    String
  loopId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  loop      Loop     @relation(fields: [loopId], references: [id])

  @@id([userId, loopId])
}

// model UserLoop {
//   userId    String
//   loopId    String
//   createdAt DateTime @default(now())

//   user      User     @relation(fields: [userId], references: [id])
//   loop      Loop     @relation(fields: [loopId], references: [id])

//   @@id([userId, loopId])
// }

model User {
  id            String   @id @default(cuid())
  userName      String   @unique
  firstName     String
  surName       String
  email         String   @unique
  password      String
  language      String   @default("Automatic")
  theme         String   @default("Automatic")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profilePicture String? // new field for profile picture

  accounts      Account[]
  sessions      Session[]
  ownedLoops    Loop[]   @relation("OwnedLoops")

  loops     UserLoop[]
  
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  sentFriendRequests   Friend[] @relation("FriendRequests")
  receivedFriendRequests Friend[] @relation("FriendRequestsReceived")
}

model Friend {
  id           String   @id @default(cuid())
  status       String   // you can use this field to represent the status of the friendship (e.g., 'pending', 'accepted', 'declined', 'blocked')
  requesterId  String
  addresseeId  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastMessageAt DateTime @default(now())

  requester    User     @relation("FriendRequests", fields: [requesterId], references: [id])
  addressee    User     @relation("FriendRequestsReceived", fields: [addresseeId], references: [id])

  @@unique([requesterId, addresseeId])
}



model Message {
  id        String   @id @default(cuid())
  content   String
  senderId    String
  recipientId String
  createdAt DateTime @default(now())
  status      String   @default("SENT")

  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
}

model PushSubscription {
  id          Int     @id @default(autoincrement())
  userId      String
  endpoint    String  @unique
  auth        String
  p256dh      String
  createdAt   DateTime @default(now())
}
